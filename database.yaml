AWSTemplateFormatVersion: "2010-09-09"
Description: Database resources for the application

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
  Stage:
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - Prod
  DBUsername:
    Type: String
    NoEcho: true
  DBPassword:
    Type: String
    NoEcho: true
  NetworkStackName:
    Type: String
    Default: HelloWorld-network
    Description: Name of the network stack to import resources from
  VpcId:
    Type: String
  PrivateSubnet1Id:
    Type: String
  PrivateSubnet2Id:
    Type: String

Resources:
  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-items
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Stage
          Value: !Ref Stage

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Aurora cluster
      SubnetIds:
        - !Ref PrivateSubnet1Id
        - !Ref PrivateSubnet2Id
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Stage
          Value: !Ref Stage

  DBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Parameter group for Aurora cluster
      Family: aurora-mysql8.0
      Parameters:
        character_set_server: utf8mb4
        collation_server: utf8mb4_unicode_ci
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Stage
          Value: !Ref Stage

  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Parameter group for Aurora instances
      Family: aurora-mysql8.0
      Parameters:
        max_connections: "1000"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Stage
          Value: !Ref Stage

  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      EngineVersion: "8.0.mysql_aurora.3.07.0"
      DatabaseName: rdsdb
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      BackupRetentionPeriod: 7
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      StorageEncrypted: true
      EnableHttpEndpoint: true
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 1
      EnableCloudwatchLogsExports:
        - error
        - slowquery
        - audit
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Stage
          Value: !Ref Stage

  AuroraInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: DBSecurityGroup
    Properties:
      Engine: aurora-mysql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref DBCluster
      DBParameterGroupName: !Ref DBParameterGroup
      PubliclyAccessible: false
      MonitoringInterval: 60
      MonitoringRoleArn: !GetAtt AuroraMonitoringRole.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Stage
          Value: !Ref Stage

  AuroraMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: monitoring.rds.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Aurora cluster
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: Allow Lambda functions to connect
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Fn::ImportValue:
              Fn::Sub: ${NetworkStackName}-SSMInstanceSecurityGroupId
          Description: Allow SSM instance to connect

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VpcId

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-db-secret
      Description: Database credentials
      SecretString: !Sub '{"username": "${DBUsername}", "password": "${DBPassword}"}'

Outputs:
  ItemsTable:
    Description: Name of the DynamoDB table
    Value: !Ref ItemsTable
    Export:
      Name: !Sub ${AWS::StackName}-ItemsTable

  DBClusterEndpoint:
    Description: Aurora cluster endpoint
    Value: !GetAtt DBCluster.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DBClusterEndpoint

  DBClusterPort:
    Description: Aurora cluster port
    Value: !GetAtt DBCluster.Endpoint.Port
    Export:
      Name: !Sub ${AWS::StackName}-DBClusterPort

  DBClusterArn:
    Description: Aurora cluster ARN
    Value: !GetAtt DBCluster.DBClusterArn
    Export:
      Name: !Sub ${AWS::StackName}-DBClusterArn

  DBSecretArn:
    Description: Database secret ARN
    Value: !Ref DBSecret
    Export:
      Name: !Sub ${AWS::StackName}-DBSecretArn
